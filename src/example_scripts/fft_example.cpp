#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/gpio.h"
#include "hardware/pio.h"
#include <array>
#include "WS2812.pio.h" // This header file gets produced during compilation from the WS2812.pio file
#include "drivers/logging/logging.h"
#include "arm_math.h"

#include "hardware_params.h"
#include "drivers/microphone/microphone.h"
#include "drivers/led/led.h"
#include "example_scripts/fft_example.h"
#include "constants.h"

#define N_SAMPLES 1024

const q15_t TEST_SAMPLE_500_HZ[1024] = {0,2332,4653,6950,9211,11426,13583,15671,17680,19599,21418,23129,24723,26191,27526,28722,29771,30670,31414,31998,32419,32676,32767,32693,32452,32047,31479,30752,29868,28833,27652,26330,24875,23294,21594,19785,17876,15876,13795,11645,9435,7178,4884,2565,233,-2099,-4422,-6721,-8987,-11207,-13371,-15466,-17483,-19411,-21241,-22963,-24569,-26050,-27399,-28608,-29673,-30587,-31346,-31946,-32384,-32658,-32766,-32708,-32484,-32095,-31543,-30832,-29963,-28943,-27776,-26469,-25027,-23458,-21769,-19971,-18071,-16080,-14007,-11863,-9659,-7405,-5115,-2798,-467,1866,4190,6493,8762,10988,13157,15260,17285,19223,21063,22796,24414,25908,27270,28494,29573,30503,31278,31894,32348,32638,32763,32721,32514,32141,31606,30910,30057,29052,27900,26606,25177,23620,21943,20156,18266,16283,14218,12080,9881,7633,5345,3030,700,-1633,-3959,-6264,-8537,-10767,-12943,-15053,-17086,-19033,-20884,-22628,-24257,-25764,-27140,-28378,-29472,-30417,-31207,-31839,-32310,-32617,-32758,-32733,-32542,-32186,-31667,-30987,-30149,-29159,-28021,-26741,-25325,-23781,-22116,-20339,-18459,-16485,-14427,-12297,-10104,-7859,-5575,-3263,-934,1400,3727,6035,8312,10547,12728,14845,16887,18843,20703,22458,24100,25619,27008,28260,29369,30329,31135,31783,32270,32593,32751,32743,32568,32229,31726,31062,30240,29265,28142,26875,25473,23941,22288,20522,18651,16686,14637,12513,10325,8086,5805,3495,1167,-1167,-3495,-5805,-8086,-10325,-12513,-14637,-16686,-18651,-20522,-22288,-23941,-25473,-26875,-28142,-29265,-30240,-31062,-31726,-32229,-32568,-32743,-32751,-32593,-32270,-31783,-31135,-30329,-29369,-28260,-27008,-25619,-24100,-22458,-20703,-18843,-16887,-14845,-12728,-10547,-8312,-6035,-3727,-1400,934,3263,5575,7859,10104,12297,14427,16485,18459,20339,22116,23781,25325,26741,28021,29159,30149,30987,31667,32186,32542,32733,32758,32617,32310,31839,31207,30417,29472,28378,27140,25764,24257,22628,20884,19033,17086,15053,12943,10767,8537,6264,3959,1633,-700,-3030,-5345,-7633,-9881,-12080,-14218,-16283,-18266,-20156,-21943,-23620,-25177,-26606,-27900,-29052,-30057,-30910,-31606,-32141,-32514,-32721,-32763,-32638,-32348,-31894,-31278,-30503,-29573,-28494,-27270,-25908,-24414,-22796,-21063,-19223,-17285,-15260,-13157,-10988,-8762,-6493,-4190,-1866,467,2798,5115,7405,9659,11863,14007,16080,18071,19971,21769,23458,25027,26469,27776,28943,29963,30832,31543,32095,32484,32708,32766,32658,32384,31946,31346,30587,29673,28608,27399,26050,24569,22963,21241,19411,17483,15466,13371,11207,8987,6721,4422,2099,-233,-2565,-4884,-7178,-9435,-11645,-13795,-15876,-17876,-19785,-21594,-23294,-24875,-26330,-27652,-28833,-29868,-30752,-31479,-32047,-32452,-32693,-32768,-32676,-32419,-31998,-31414,-30670,-29771,-28722,-27526,-26191,-24723,-23129,-21418,-19599,-17680,-15671,-13583,-11426,-9211,-6950,-4653,-2332,0,2332,4653,6950,9211,11426,13583,15671,17680,19599,21418,23129,24723,26191,27526,28722,29771,30670,31414,31998,32419,32676,32767,32693,32452,32047,31479,30752,29868,28833,27652,26330,24875,23294,21594,19785,17876,15876,13795,11645,9435,7178,4884,2565,233,-2099,-4422,-6721,-8987,-11207,-13371,-15466,-17483,-19411,-21241,-22963,-24569,-26050,-27399,-28608,-29673,-30587,-31346,-31946,-32384,-32658,-32766,-32708,-32484,-32095,-31543,-30832,-29963,-28943,-27776,-26469,-25027,-23458,-21769,-19971,-18071,-16080,-14007,-11863,-9659,-7405,-5115,-2798,-467,1866,4190,6493,8762,10988,13157,15260,17285,19223,21063,22796,24414,25908,27270,28494,29573,30503,31278,31894,32348,32638,32763,32721,32514,32141,31606,30910,30057,29052,27900,26606,25177,23620,21943,20156,18266,16283,14218,12080,9881,7633,5345,3030,700,-1633,-3959,-6264,-8537,-10767,-12943,-15053,-17086,-19033,-20884,-22628,-24257,-25764,-27140,-28378,-29472,-30417,-31207,-31839,-32310,-32617,-32758,-32733,-32542,-32186,-31667,-30987,-30149,-29159,-28021,-26741,-25325,-23781,-22116,-20339,-18459,-16485,-14427,-12297,-10104,-7859,-5575,-3263,-934,1400,3727,6035,8312,10547,12728,14845,16887,18843,20703,22458,24100,25619,27008,28260,29369,30329,31135,31783,32270,32593,32751,32743,32568,32229,31726,31062,30240,29265,28142,26875,25473,23941,22288,20522,18651,16686,14637,12513,10325,8086,5805,3495,1167,-1167,-3495,-5805,-8086,-10325,-12513,-14637,-16686,-18651,-20522,-22288,-23941,-25473,-26875,-28142,-29265,-30240,-31062,-31726,-32229,-32568,-32743,-32751,-32593,-32270,-31783,-31135,-30329,-29369,-28260,-27008,-25619,-24100,-22458,-20703,-18843,-16887,-14845,-12728,-10547,-8312,-6035,-3727,-1400,934,3263,5575,7859,10104,12297,14427,16485,18459,20339,22116,23781,25325,26741,28021,29159,30149,30987,31667,32186,32542,32733,32758,32617,32310,31839,31207,30417,29472,28378,27140,25764,24257,22628,20884,19033,17086,15053,12943,10767,8537,6264,3959,1633,-700,-3030,-5345,-7633,-9881,-12080,-14218,-16283,-18266,-20156,-21943,-23620,-25177,-26606,-27900,-29052,-30057,-30910,-31606,-32141,-32514,-32721,-32763,-32638,-32348,-31894,-31278,-30503,-29573,-28494,-27270,-25908,-24414,-22796,-21063,-19223,-17285,-15260,-13157,-10988,-8762,-6493,-4190,-1866,467,2798,5115,7405,9659,11863,14007,16080,18071,19971,21769,23458,25027,26469,27776,28943,29963,30832,31543,32095,32484,32708,32766,32658,32384,31946,31346,30587,29673,28608,27399,26050,24569,22963,21241,19411,17483,15466,13371,11207,8987,6721,4422,2099,-233,-2565,-4884,-7178,-9435,-11645,-13795,-15876,-17876,-19785,-21594,-23294,-24875,-26330,-27652,-28833,-29868,-30752,-31479,-32047,-32452,-32693,-32768,-32676,-32419,-31998,-31414,-30670,-29771,-28722,-27526,-26191,-24723,-23129,-21418,-19599,-17680,-15671,-13583,-11426,-9211,-6950,-4653,-2332,0,2332,4653,6950,9211,11426,13583,15671,17680,19599,21418,23129,24723,26191,27526,28722,29771,30670,31414,31998,32419,32676,32767,32693,32452,32047,31479,30752,29868,28833,27652,26330,24875,23294,21594,19785,17876,15876,13795,11645,9435,7178,4884,2565,233,-2099,-4422,-6721,-8987,-11207,-13371,-15466,-17483,-19411,-21241,-22963,-24569,-26050,-27399,-28608,-29673,-30587,-31346,-31946,-32384,-32658,-32766,-32708,-32484,-32095,-31543,-30832,-29963,-28943,-27776,-26469,-25027,-23458,-21769,-19971,-18071,-16080,-14007,-11863,-9659,-7405,-5115,-2798,-467,1866,4190,6493,8762,10988,13157,15260,17285,19223,21063,22796,24414,25908,27270,28494,29573,30503,31278,31894,32348,32638,32763,32721,32514,32141,31606,30910,30057,29052,27900,26606,25177,23620,21943,20156,18266,16283,14218,12080,9881,7633,5345,3030,700,-1633,-3959,-6264,-8537,-10767,-12943,-15053,-17086,-19033};
const uint16_t FREQ_BINS[13] = {6,8,11,16,24,35,51,75,110,161,237,349,513};

void fftexample::run(){
    std::vector<uint16_t> reads = mic_driver::read((uint16_t)N_SAMPLES);
    
    q15_t pSrc[N_SAMPLES]={0};
    q15_t pDst[N_SAMPLES*2]={0};

    for(int i = 0; i < N_SAMPLES; i++){
        //convert to q15
        pSrc[i] = ((int16_t)reads[i]-2048)<<4;
        //apply hanning window
        pSrc[i] = ((int32_t)pSrc[i] * (int32_t)HANNING_WINDOW_1024[i])>>15;
    }

    arm_rfft_instance_q15 S = arm_rfft_instance_q15();
    arm_rfft_init_q15(&S,1024,0,1);
    arm_rfft_q15(&S,pSrc,pDst);

    //discard redundant congugates
    q15_t phasors[N_SAMPLES + 2];
    for(int i = 0; i<N_SAMPLES+2; i++){
        phasors[i] = pDst[i];
    }

    q15_t fftOutReal[(N_SAMPLES>>1)+1];
    arm_cmplx_mag_squared_q15(phasors,fftOutReal,(N_SAMPLES>>1)+1);
    
    
    //set leds based on bucket power sums
    for(int iBin = 1; iBin < 13; iBin++){
        q31_t sumOfPower = 0;
        for(int iFreq = FREQ_BINS[iBin-1]; iFreq<FREQ_BINS[iBin]; iFreq++){
            sumOfPower += fftOutReal[iFreq];
        }

        //clamp as nominal values are < 2^8 but in theory values could be as high 2^13 for FP 3.13
        //power should be > 0
        if(sumOfPower > 255){
            sumOfPower = 255;
        }            
        std::array<uint8_t, 3> colour = {0,0,0};
        if(sumOfPower < 128){
            colour[1] = (uint8_t)sumOfPower*2;
        }else{
            colour[0] = (uint8_t)sumOfPower;
        }
        led_driver::setLED(iBin-1,colour);
    }
    led_driver::update();

}
